---
name: instancing_v
node_type: SHADER
value: ""
children:
  - name: uuid
    node_type: ""
    value: "78151813081207849805371540124945706841"
    children: []
  - name: stage
    node_type: ""
    value: "0"
    children: []
  - name: bytes
    node_type: ""
    value: ""
    children: []
  - name: src_code
    node_type: ""
    value: "#version 450\r\n\r\nlayout(location = 0) in vec3 position;\r\nlayout(location = 1) in vec2 tex_coord;\r\nlayout(location = 2) in vec3 instance_position;\r\nlayout(location = 3) in vec3 instance_scale;\r\nlayout(location = 4) in vec3 instance_rotation_axis;\r\nlayout(location = 5) in float instance_rotation_angle;\r\n\r\nlayout(binding = 0) uniform ViewModel {\r\n    mat4 view;\r\n    mat4 proj;\r\n} view_model;\r\n\r\nout vec2 vert_tex_coord;\r\n\r\n// Function to construct a rotation matrix given an axis and an angle\r\nmat4 rotation_matrix(vec3 axis, float angle) {\r\n    float cos_angle = cos(angle);\r\n    float sin_angle = sin(angle);\r\n    float one_minus_cos = 1.0 - cos_angle;\r\n\r\n    axis = normalize(axis);\r\n\r\n    return mat4(\r\n        vec4(cos_angle + axis.x * axis.x * one_minus_cos,         axis.x * axis.y * one_minus_cos - axis.z * sin_angle, axis.x * axis.z * one_minus_cos + axis.y * sin_angle, 0.0),\r\n        vec4(axis.y * axis.x * one_minus_cos + axis.z * sin_angle, cos_angle + axis.y * axis.y * one_minus_cos,         axis.y * axis.z * one_minus_cos - axis.x * sin_angle, 0.0),\r\n        vec4(axis.z * axis.x * one_minus_cos - axis.y * sin_angle, axis.z * axis.y * one_minus_cos + axis.x * sin_angle, cos_angle + axis.z * axis.z * one_minus_cos,         0.0),\r\n        vec4(0.0, 0.0, 0.0, 1.0)\r\n    );\r\n}\r\n\r\n// Function to construct the model matrix\r\nmat4 construct_model_matrix(vec3 translation, vec3 scale, vec3 rotation_axis, float rotation_angle) {\r\n    // Scale matrix\r\n    mat4 scale_matrix = mat4(\r\n        vec4(scale.x, 0.0, 0.0, 0.0),\r\n        vec4(0.0, scale.y, 0.0, 0.0),\r\n        vec4(0.0, 0.0, scale.z, 0.0),\r\n        vec4(0.0, 0.0, 0.0, 1.0)\r\n    );\r\n\r\n    // Rotation matrix\r\n    mat4 rot_matrix = rotation_matrix(rotation_axis, rotation_angle);\r\n\r\n    // Translation matrix\r\n    mat4 translation_matrix = mat4(\r\n        vec4(1.0, 0.0, 0.0, 0.0),\r\n        vec4(0.0, 1.0, 0.0, 0.0),\r\n        vec4(0.0, 0.0, 1.0, 0.0),\r\n        vec4(translation, 1.0)\r\n    );\r\n\r\n    // Combine all transformations: translate * rotate * scale\r\n    return translation_matrix * rot_matrix * scale_matrix;\r\n}\r\n\r\nvoid main() {\r\n    vert_tex_coord = tex_coord;\r\n\r\n    mat4 model = construct_model_matrix(instance_position, instance_scale, instance_rotation_axis, instance_rotation_angle);\r\n    \r\n    gl_Position = view_model.proj * view_model.view * model * vec4(position, 1.0);\r\n}"
    children: []
